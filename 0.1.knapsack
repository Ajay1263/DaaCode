#include <iostream>
using namespace std;
int max(int x, int y) {
   return (x > y) ? x : y;
}
int knapSack(int W, int w[], int v[], int n) {
   int i, wt;
   int K[n + 1][W + 1];
   for (i = 0; i <= n; i++) {
      for (wt = 0; wt <= W; wt++) {
         if (i == 0 || wt == 0)
         K[i][wt] = 0;
         else if (w[i - 1] <= wt)
            K[i][wt] = max(v[i - 1] + K[i - 1][wt - w[i - 1]], K[i - 1][wt]);
         else
        K[i][wt] = K[i - 1][wt];
      }
   }
   return K[n][W];
}
int main() {
   cout << "Enter the number of items in a Knapsack:";
   int n, W;
   cin >> n;
   int v[n], w[n];
   for (int i = 0; i < n; i++) {
      cout << "Enter value and weight for item " << i << ":";
      cin >> v[i];
      cin >> w[i];
   }
   cout << "Enter the capacity of knapsack";
   cin >> W;
   cout << knapSack(W, w, v, n);
   return 0;
}

// there are two function definitions: max() and knapSack(). The max() function takes two integers x and y and returns the maximum of the two. The knapSack() function takes four arguments: the maximum weight capacity W, the weight array w[], the value array v[], and the number of items n. This function returns the maximum value that can be carried in the knapsack.

The knapSack() function creates a two-dimensional array K[n+1][W+1] and initializes its values to 0. It then iterates over each item and for each weight up to the maximum weight capacity, it computes the maximum value that can be obtained either by including the current item or by excluding it. The final value in the K array gives the maximum value that can be carried in the knapsack.
