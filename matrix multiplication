// C++ code to implement the
// matrix chain multiplication using recursion

#include <bits/stdc++.h>
using namespace std;

// Matrix Ai has dimension p[i-1] x p[i]
// for i = 1 . . . n
int MatrixChainOrder(int p[], int i, int j)
{
	if (i == j)
		return 0;
	int k;
	int mini = INT_MAX;
	int count;

	// Place parenthesis at different places
	// between first and last matrix,
	// recursively calculate count of multiplications
	// for each parenthesis placement
	// and return the minimum count
	for (k = i; k < j; k++)
	{
		count = MatrixChainOrder(p, i, k)
				+ MatrixChainOrder(p, k + 1, j)
				+ p[i - 1] * p[k] * p[j];

		mini = min(count, mini);
	}

	// Return minimum count
	return mini;
}

// Driver Code
int main()
{
	int arr[] = { 1, 2, 3, 4, 3 };
	int N = sizeof(arr) / sizeof(arr[0]);

	// Function call
	cout << "Minimum number of multiplications is "
		<< MatrixChainOrder(arr, 1, N - 1);
	return 0;
}

// This code is contributed by Shivi_Aggarwal
// The main function is MatrixChainOrder which takes an array p and two integers i and j as arguments. The array p represents the dimensions of n matrices such that the ith matrix has dimensions p[i-1] x p[i]. The function calculates the minimum number of scalar multiplications needed to multiply the matrices from i to j, where i and j are indices of matrices in the array.

The function first checks if i and j are equal, which means there is only one matrix in the chain and no multiplication is needed. If not, the function loops through all possible positions k where the chain can be split and recursively calculates the minimum number of multiplications for each split. The count of scalar multiplications is calculated by multiplying the dimensions of the matrices involved. The function returns the minimum count of scalar multiplications among all possible splits.
